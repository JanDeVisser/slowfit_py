# Generated by Django 3.1.1 on 2020-09-03 19:09

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import slowfit.models.base


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assetOfModel', models.CharField(max_length=30)),
                ('assetOfID', models.IntegerField()),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('tags', models.CharField(blank=True, max_length=30)),
                ('mimeType', models.CharField(blank=True, max_length=40)),
                ('asset', models.FileField(upload_to=slowfit.models.base.asset_directory)),
            ],
            options={
                'ordering': ['assetOfModel', 'assetOfID', 'name'],
            },
        ),
        migrations.CreateModel(
            name='BikeType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=200, verbose_name='Description')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, slowfit.models.base.RegisteredModel),
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=200, verbose_name='Description')),
                ('URL', models.URLField(null=True, verbose_name='Website')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, slowfit.models.base.RegisteredModel, slowfit.models.base.Annotateable, slowfit.models.base.AssetOwner),
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('isoCode', models.CharField(max_length=5)),
                ('isoCode3', models.CharField(max_length=5)),
            ],
            bases=(models.Model, slowfit.models.base.RegisteredModel),
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=200, verbose_name='Description')),
                ('firstName', models.CharField(max_length=30, verbose_name='First Name')),
                ('lastName', models.CharField(max_length=30, verbose_name='Last Name')),
                ('address', models.TextField(blank=True, null=True, verbose_name='Address')),
                ('email', models.EmailField(max_length=60, unique=True, verbose_name='EMail Address')),
                ('phoneMain', models.CharField(max_length=20, unique=True, verbose_name='Main Phone Number')),
                ('phoneAlt', models.CharField(blank=True, max_length=20, null=True, verbose_name='Alternative Phone Number')),
                ('dateOfBirth', models.DateField(blank=True, null=True, verbose_name='Date of Birth')),
                ('height', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Height in cm')),
                ('inseam', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Inseam in cm')),
                ('armLength', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Arm Length in cm')),
            ],
            options={
                'ordering': ['lastName', 'firstName'],
            },
            bases=(models.Model, slowfit.models.base.RegisteredModel, slowfit.models.base.AssetOwner, slowfit.models.base.Annotateable),
        ),
        migrations.CreateModel(
            name='FitSheet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=200, verbose_name='Description')),
                ('hx', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Selected Handlebar Reach (mm)')),
                ('hy', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Selected Handlebar Stack (mm)')),
                ('sx', models.SmallIntegerField(blank=True, null=True, verbose_name='Selected Current Saddle X')),
                ('sy', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Selected Current Saddle Y')),
                ('crankLength', models.PositiveSmallIntegerField(blank=True, choices=[(165, '165mm'), (167.5, '167.5mm'), (170, '170mm'), (172.5, '172.5mm'), (175, '175mm')], null=True, verbose_name='Selected Current Crank Length')),
                ('saddle', models.CharField(blank=True, max_length=30, null=True, verbose_name='Selected Saddle')),
                ('saddleHeight', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Selected Saddle Height')),
                ('saddleSetback', models.SmallIntegerField(blank=True, null=True, verbose_name='Selected Saddle Setback/Offset')),
                ('saddleBarDrop', models.SmallIntegerField(blank=True, help_text='positive: saddle higher than bar, negative: bar higher than saddle', null=True, verbose_name='Selected Saddle to Bar Drop')),
            ],
            bases=(models.Model, slowfit.models.base.RegisteredModel, slowfit.models.base.AssetOwner, slowfit.models.base.Annotateable),
        ),
        migrations.CreateModel(
            name='Frame',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=200, verbose_name='Description')),
                ('URL', models.URLField(blank=True, null=True, verbose_name='Webpage')),
                ('yearFrom', models.PositiveSmallIntegerField(null=True, verbose_name='First Model Year')),
                ('yearTo', models.PositiveSmallIntegerField(null=True, verbose_name='Last Model Year')),
                ('bikeType', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='slowfit.biketype', verbose_name='Bike Type')),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='slowfit.brand', verbose_name='Brand')),
            ],
            options={
                'ordering': ['brand', 'name'],
            },
            bases=(models.Model, slowfit.models.base.RegisteredModel, slowfit.models.base.Annotateable, slowfit.models.base.AssetOwner),
        ),
        migrations.CreateModel(
            name='FrameSize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=200, verbose_name='Description')),
                ('headTubeAngle', models.FloatField()),
                ('stack', models.PositiveSmallIntegerField()),
                ('reach', models.PositiveSmallIntegerField()),
                ('frame', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='slowfit.frame')),
            ],
            options={
                'ordering': ['frame', 'name'],
            },
            bases=(models.Model, slowfit.models.base.RegisteredModel, slowfit.models.base.Annotateable, slowfit.models.base.AssetOwner),
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=200, verbose_name='Description')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, slowfit.models.base.RegisteredModel),
        ),
        migrations.CreateModel(
            name='RoadFitSheet',
            fields=[
                ('fitsheet_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='slowfit.fitsheet')),
                ('webX', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Selected Handlebar Web X (Reach)')),
                ('webY', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Selected Handlebar Web Y (Stack)')),
                ('barWidth', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Selected Handlebar Width')),
                ('barDrop', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Selected Handlebar Drop')),
                ('barReach', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Selected Handlebar Reach')),
            ],
            options={
                'abstract': False,
            },
            bases=('slowfit.fitsheet',),
        ),
        migrations.CreateModel(
            name='TTFitSheet',
            fields=[
                ('fitsheet_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='slowfit.fitsheet')),
                ('aeroBar', models.CharField(blank=True, max_length=30, null=True, verbose_name='Selected Aerobar')),
                ('padWidth', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Pad Width (mm)')),
                ('extensions', models.CharField(blank=True, max_length=30, null=True, verbose_name='Selected Extensions')),
            ],
            options={
                'abstract': False,
            },
            bases=('slowfit.fitsheet',),
        ),
        migrations.CreateModel(
            name='Visit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=200, verbose_name='Description')),
                ('date', models.DateTimeField(verbose_name='Date of Visit')),
                ('purpose', models.CharField(max_length=100, verbose_name='Purpose of Visit')),
                ('experience', models.TextField(blank=True, null=True, verbose_name='Cycling Experience')),
                ('goals', models.TextField(blank=True, null=True, verbose_name='Athletic Goals')),
                ('injuries', models.TextField(blank=True, null=True, verbose_name='Injuries and Limitations')),
                ('weight', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Weight in kg')),
                ('customerConcerns', models.TextField(blank=True, null=True, verbose_name="Rider's Specific Concerns")),
                ('fitterConcerns', models.TextField(blank=True, null=True, verbose_name="Fitter's Concerns")),
                ('pedalSystem', models.TextField(blank=True, choices=[('Shimano Road', 'Shimano Road'), ('Shimano SPD', 'Shimano SPD'), ('Look', 'Look'), ('Time', 'Time'), ('Speedplay', 'Speedplay')], null=True, verbose_name='Pedal System')),
                ('hx', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Current Handlebar Reach (mm)')),
                ('hy', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Current Handlebar Stack (mm)')),
                ('sx', models.SmallIntegerField(blank=True, null=True, verbose_name='Current Saddle X')),
                ('sy', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Current Saddle Y')),
                ('crankLength', models.PositiveSmallIntegerField(blank=True, choices=[(165, '165mm'), (167.5, '167.5mm'), (170, '170mm'), (172.5, '172.5mm'), (175, '175mm')], null=True, verbose_name='Current Crank Length')),
                ('saddle', models.CharField(blank=True, max_length=30, null=True, verbose_name='Current Saddle')),
                ('saddleHeight', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Current Saddle Height')),
                ('saddleSetback', models.SmallIntegerField(blank=True, null=True, verbose_name='Current Saddle Setback/Offset')),
                ('saddleBarDrop', models.SmallIntegerField(blank=True, help_text='positive: saddle higher than bar, negative: bar higher than saddle', null=True, verbose_name='Current Saddle to Bar drop')),
                ('currentBike', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='slowfit.framesize', verbose_name='Current Bike')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='slowfit.customer')),
            ],
            options={
                'get_latest_by': 'date',
                'order_with_respect_to': 'customer',
            },
            bases=(models.Model, slowfit.models.base.RegisteredModel, slowfit.models.base.AssetOwner, slowfit.models.base.Annotateable),
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('posted', models.DateTimeField(auto_now_add=True)),
                ('noteForModel', models.CharField(max_length=30)),
                ('noteForID', models.IntegerField()),
                ('text', models.TextField()),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['noteForModel', 'noteForID', '-posted'],
            },
        ),
        migrations.CreateModel(
            name='ImportLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('reference', models.TextField(null=True)),
                ('title', models.TextField(null=True)),
                ('status', models.TextField(choices=[('Start', 'Start'), ('Busy', 'Busy'), ('Done', 'Done'), ('Errors', 'Errors')])),
                ('frameCount', models.PositiveSmallIntegerField(default=0)),
                ('log', models.TextField(null=True)),
                ('importedBy', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-timestamp',),
            },
        ),
        migrations.AddField(
            model_name='frame',
            name='imported',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='slowfit.importlog'),
        ),
        migrations.AddField(
            model_name='frame',
            name='material',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='slowfit.material', verbose_name='Material'),
        ),
        migrations.AddField(
            model_name='fitsheet',
            name='bikeUsed',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='slowfit.framesize', verbose_name='Bike Used'),
        ),
        migrations.AddField(
            model_name='fitsheet',
            name='visit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='slowfit.visit'),
        ),
        migrations.AddField(
            model_name='brand',
            name='country',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='slowfit.country', verbose_name='Country'),
        ),
        migrations.AddField(
            model_name='brand',
            name='imported',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='slowfit.importlog'),
        ),
        migrations.CreateModel(
            name='Trial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=200, verbose_name='Description')),
                ('hx', models.PositiveSmallIntegerField(verbose_name='Handlebar Reach (mm)')),
                ('hy', models.PositiveSmallIntegerField(verbose_name='Handlebar Stack (mm)')),
                ('sx', models.SmallIntegerField(verbose_name='Saddle X')),
                ('sy', models.PositiveSmallIntegerField(verbose_name='Saddle Y')),
                ('fitSheet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='slowfit.fitsheet')),
            ],
            options={
                'order_with_respect_to': 'fitSheet',
            },
            bases=(models.Model, slowfit.models.base.RegisteredModel, slowfit.models.base.AssetOwner, slowfit.models.base.Annotateable),
        ),
        migrations.AlterOrderWithRespectTo(
            name='fitsheet',
            order_with_respect_to='visit',
        ),
    ]
